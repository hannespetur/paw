//==================================================================================================
/*!
  @file

  @copyright 2017 NumScale SAS

  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
**/
//==================================================================================================
#ifndef BOOST_SIMD_ALGORITHM_GENERATE_N_HPP_INCLUDED
#define BOOST_SIMD_ALGORITHM_GENERATE_N_HPP_INCLUDED

#include <boost/simd/algorithm/generate.hpp>

namespace boost { namespace simd
{
  /*!
    @ingroup group-algo

    Assigns values, generated by given function object g, to the first n elements
    in the range beginning at first.

    @param first  Beginning of the range of elements
    @param n      number of the elements to generate
    @param g      unary function object to generate_n elements

    @par Requirement

      - @c first, @c last and @c out must be pointer to Vectorizable type.

      - @c f must be a polymorphic unary function object, i.e callable on generic types.
      - If n <= 0 does nothing

    @par Example:

      @snippet generate_n.cpp generate_n

    @par Possible output:

      @snippet generate_n.txt generate_n

      @return Pointer to the element past the last element generated.
  **/
  template<typename T, typename Size, typename Gen>
  const T* generate_n(T * first, Size n, Gen g)
  {
    if (n > Size(0))
    {
      generate(first, first+n, g);
      return first+n;
    }

    return first;
  }
} }

#endif
